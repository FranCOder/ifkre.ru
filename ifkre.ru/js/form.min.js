if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (searchElement, fromIndex) {
        var k;

        // 1. Положим O равным результату вызова ToObject с передачей ему
        //    значения this в качестве аргумента.
        if (this == null) {
            throw new TypeError('"this" is null or not defined');
        }

        var O = Object(this);

        // 2. Положим lenValue равным результату вызова внутреннего метода Get
        //    объекта O с аргументом "length".
        // 3. Положим len равным ToUint32(lenValue).
        var len = O.length >>> 0;

        // 4. Если len равен 0, вернём -1.
        if (len === 0) {
            return -1;
        }

        // 5. Если был передан аргумент fromIndex, положим n равным
        //    ToInteger(fromIndex); иначе положим n равным 0.
        var n = +fromIndex || 0;

        if (Math.abs(n) === Infinity) {
            n = 0;
        }

        // 6. Если n >= len, вернём -1.
        if (n >= len) {
            return -1;
        }

        // 7. Если n >= 0, положим k равным n.
        // 8. Иначе, n<0, положим k равным len - abs(n).
        //    Если k меньше нуля 0, положим k равным 0.
        k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

        // 9. Пока k < len, будем повторять
        while (k < len) {
            // a. Положим Pk равным ToString(k).
            //   Это неявное преобразование для левостороннего операнда в операторе in
            // b. Положим kPresent равным результату вызова внутреннего метода
            //    HasProperty объекта O с аргументом Pk.
            //   Этот шаг может быть объединён с шагом c
            // c. Если kPresent равен true, выполним
            //    i.  Положим elementK равным результату вызова внутреннего метода Get
            //        объекта O с аргументом ToString(k).
            //   ii.  Положим same равным результату применения
            //        Алгоритма строгого сравнения на равенство между
            //        searchElement и elementK.
            //  iii.  Если same равен true, вернём k.
            if (k in O && O[k] === searchElement) {
                return k;
            }
            k++;
        }
        return -1;
    };
}

(function ($) {
    var settings = {
        changelinkClass: 'box_select',
        changelinkName: 'изменить',
        destination: $(".zayvaka_content").offset().top,
        form: $('#send_form')
    };
    var dictonary = {};
    var models = {

    };
    var Model = function (id, next) {

        var modelData = function (key) {
            this.ready;
            this.setReadyModel();
            this.inputs = {};
            this.key = key;
            this.storage;
            this.setStorage();
            this.addItem = function (name) {
                var current = "";
                if (this.storage !== false)
                    current = (this.storage[name]) ? this.storage[name] : "";
                this.inputs[name] = {
                    value: current
                };
            };
            this.itemExists = function (name) {
                if (this.inputs[name] !== undefined)
                    return true;
                else
                    return false;
            };
            this.addFields = function (input, fields) {
                for (var key in fields) {
                    this.inputs[input][key] = fields[key];
                }
            };
            this.setValue = function (name, value) {
                this.inputs[name].value = value;
                this.saveJson(name, value);
                this.setReadyModel();
            };
            this.getValue = function (name) {
                return this.inputs[name].value;
            };
            this.saveJson = function (name, value) {
                this.setStorage();
                var temp = (this.storage) ? this.storage : {};
                temp[name] = value;
                console.log(temp);
                localStorage[key] = JSON.stringify(temp);
            };
        };
        modelData.prototype.checkOnChecked = function (input) {
            if (this.inputs.type.value.indexOf(input) !== -1)
                return true;
            else
                return false;
        };
        modelData.prototype.changeRequired = function (status, input) {
            this.inputs[input].required = status;
        };
        modelData.prototype.setReadyModel = function () {
            if (this.checkReadyModel())
                this.ready = true;
            else
                this.ready = false;
        };
        modelData.prototype.getReadyModel = function () {
            this.setReadyModel();
            return this.ready;
        };
        modelData.prototype.checkReadyModel = function () {
            for (var key in this.inputs) {
                if (this.inputs[key].required && this.inputs[key].value === "")
                    return false;
            }
            return true;
        };
        modelData.prototype.setStorage = function () {
            this.storage = this.getStorage();
        };
        modelData.prototype.getStorage = function () {
            if (localStorage[this.key] !== undefined) {
                return JSON.parse(localStorage[this.key]);
            } else {
                return false;
            }
        };
        this.ready = false;
        this.data = {};
        this.id = id;
        this.next = next;
        this.addModel = function (key) {
            this.data[key] = new modelData(key);
        };
        this.setData = function (arr) {
            // arr[0] - префиксное название поля (ключ модели)
            // arr[1] - название поля
            this.data[arr[0]].addItem(arr[1]);
        };
        this.dataExist = function (arr) {
            if (this.data[arr[0]] === undefined)
                return false;
            else
                return this.data[arr[0]].itemExists(arr[1]);
        };
        this.setFields = function (arr, params) {
            this.data[arr[0]].addFields(arr[1], params);
        };
        this.checkOnChecked = function (prefix, input) {
            return this.data[prefix].checkOnChecked(input);
        };
        this.changeRequired = function (prefix, status, input) {
            this.data[prefix].changeRequired(status, input);
        };
        this.checkReady = function () {
            for (var mod in this.data) {
                if (!this.data[mod].getReadyModel())
                    return false;
            }
            return true;
        };
        this.setValue = function (arr, value) {
            this.data[arr[0]].setValue(arr[1], value);
            this.setReady();
        };
        this.getValue = function (arr) {
            return this.data[arr[0]].getValue(arr[1]);
        };
        this.getData = function () {
            console.log(this);
        };
        this.setReady = function () {
            if (this.checkReady()) {
                this.ready = true;
                $("#" + this.id).former('setActiveNext', this.id, this.next);
                console.log(this.id);
            } else {
                if (this.ready) {
                    this.ready = false;
                    $("#" + this.id).former('removeActiveNext', this.id, this.next);
                }
            }
        };
    };
    var methods = {
        init: function () {
            var $this = $(this);
            var blocks = $this.find('.block');
            $this.on('click', '.box_select', function (e) {
                $this.former('changeBlock', $(this).attr('href'));
                e.preventDefault();
            });
            $('.download_file').click(function (e) {
                //e.preventDefault();
                $url = $(this).attr('href');
                var temp = $this.serializeArray();
                var data = {};
                for (var key in temp) {
                    data[temp[key]['name']] = temp[key]['value'];
                }/*
                 $.post($url, data, function(result){
                 console.log(result);
                 });*/
            });
            //$this.bind('submit', methods.submit);
            $.each(blocks, function (i, block) {
                models[block.id] = new Model(block.id, $(block).attr('data-next'));
                $.each($(block).find('[data-block]'), function (t, div) {
                    dictonary[$(div).attr('data-block')] = $(div).attr('data-title');
                    var key = $(div).attr('data-block');
                    models[block.id].addModel(key);
                });
                var data = {};
                var inputs = $(block).find('input, select');
                $.each(inputs, function (k, input) {
                    var arr = input.name.split('.');
                    switch (input.type) {
                        case 'text':
                        case 'phone':
                        case 'email':
                            var textName = $(input).siblings('.zcb_in_title').length > 0 ? $(input).siblings('.zcb_in_title').html() : $(input).parent('label').siblings('.zcb_in_title').html();
                            dictonary[input.name] = textName;
                            var required = ($(input).attr('data-req') === 'Y') ? true : false;
                            models[block.id].setData(arr);
                            if ($(input).attr('data-req') === 'R') {
                                if (models[block.id].checkOnChecked(arr[0], arr[1]))
                                    required = true;
                            }
                            models[block.id].setFields(arr, {
                                required: required,
                                type: 'text'
                            });
                            var val = models[block.id].getValue(arr);
                            if (val.length > 0) {
                                $(input).val(val);
                                $(input).trigger('change');
                            }
                            $(input).on('keyup', function () {
                                models[block.id].setReady();
                            });
                            $(input).on('change', function () {
                                models[block.id].setValue(arr, input.value);
                            });
                            break;
                        case 'select-one':
                            dictonary[input.name] = $(input).siblings('.zcb_in_title').html();
                            $.each($(input).children('option'), function (i, option) {
                                dictonary[$(option).val()] = $(option).html();
                            });
                            models[block.id].setData(arr);
                            models[block.id].setFields(arr, {
                                required: ($(input).attr('data-req') === 'Y') ? true : false,
                                type: 'select'
                            });
                            var val = models[block.id].getValue(arr);
                            if (val.length > 0) {
                                $(input).val(val);
                                $(input).trigger('change');
                            }
                            $(input).on('change', function () {
                                models[block.id].setValue(arr, input.value);
                            });
                            break;
                        case 'radio':
                            if (dictonary[input.name] === undefined)
                                dictonary[input.name] = {};
                            dictonary[input.name][input.value] = $(input).attr('data-title');
                            if (!models[block.id].dataExist(arr)) {
                                models[block.id].setData(arr);
                                models[block.id].setFields(arr, {
                                    required: true,
                                    type: 'radio'
                                });
                                var val = models[block.id].getValue(arr);
                                if (val.length > 0) {
                                    $('input[type="radio"][name="' + input.name + '"][value="' + val + '"]').prop('checked', true);
                                    $(input).trigger('change');
                                }
                            }
                            $(input).on('change', function () {
                                // console.log(input.value);
                                models[block.id].setValue(arr, input.value);
                            });
                            break;
                        case 'checkbox':
                            if (!models[block.id].dataExist(arr)) {
                                models[block.id].setData(arr);
                                models[block.id].setFields(arr, {
                                    required: true,
                                    type: 'checkbox'
                                });
                            }
                            var val = models[block.id].getValue(arr);
                            if (val.indexOf(input.value) !== -1) {
                                //models[block.id].changeRequired(arr[0], true, input.value);
                                $(input).prop('checked', true).trigger('change');
                            }
                            $(input).on('change', function () {
                                var check = $(this).prop('checked');
                                var value = $(this).val();
                                models[block.id].changeRequired(arr[0], check, value);
                                var values = [];
                                var inputs = $('input[name="' + input.name + '"]:checked');
                                if (inputs.length > 0) {
                                    $.each(inputs, function (i, item) {
                                        values.push(item.value);
                                    });
                                } else {
                                    values = false;
                                }
                                models[block.id].setValue(arr, values);
                            });
                            break;
                        case 'file':
                            var required = ($(input).attr('data-req') === 'Y') ? true : false;
                            models[block.id].setData(arr);
                            models[block.id].setFields(arr, {
                                required: required,
                                type: 'text'
                            });
                            var val = models[block.id].getValue(arr);
                            if (val.length > 0) {
                                $(input).parent('div').find('.jq-file__name').html(val);
                            }
                            $(input).on('change', function () {
                                models[block.id].setValue(arr, input.files[0].name);
                                if (localStorage['node'] === undefined) {
                                    $.getJSON('/addnode', function (json) {
                                        localStorage['node'] = json.result;
                                        $this.former('addFile', input);
                                    });
                                } else {
                                    $this.former('addFile', input);
                                }
                            });
                            break;
                    }
                });
                models[block.id].setReady();
            });
            $('.zcbi_btn_copy').bind('click.former', methods.copyAdres);
            $('.add_file_input').click(function (event) {
                event.preventDefault();
                $clone = $('<div class="zpl_file zpl_file-adv">' +
                        '<input type="file" data-req="N" name="files.advantage[]">' +
                        '<div class="zpl_file_del"></div>' +
                        '</div>');
                $input = $clone.find('input');
                $($input).styler({
                    fileBrowse: 'Выбрать'
                });
                $(this).before($clone);
            });
            if (localStorage['node'] !== undefined) {
                $.getJSON('/refresh', function (json) {
                    if (json.refresh) {
                        $.getJSON('/addnode', function (json) {
                            localStorage['node'] = json.result;
                            $this.former('addFile', input);
                        });
                    }
                });
            }
        },
        getMessage: function (code) {
            return dictonary[code];
        },
        addFile: function (input) {
            var arrName = input.name.split(".");
            var field;
            var url;
            var formData = new FormData();
            if ($(input).attr('data-req') === 'Y') {
                field = "af_img_" + arrName[1];
                url = "/main";
            } else {
                field = 'photo';
                url = "/add";
            }
            formData.append('files[]', input.files[0]);
            formData.append('field', field);
            formData.append('id', localStorage['node']);
            $.ajax({
                url: '/uploader' + url,
                data: formData,
                type: 'POST',
                dataType: 'JSON',
                processData: false,
                contentType: false,
                success: function (data) {
                    //console.log(data)
                    $.post('/upload' + url, {'field': field, 'content': data.files[0].name, 'id': localStorage['node']})
                            .done(function (result) {

                            }, 'json');
                }
            });

        },
        update: function (event) {
            var $this = $(this);
            var data = $this.serializeArray();
            var fin = [];
            for (var key in data) {
                fin.push({
                    name: data[key].name,
                    value: (typeof dictonary[data[key].name] === 'object') ? dictonary[data[key].name][data[key].value] : data[key].value
                });
            }
            if (localStorage['node'] !== undefined) {
                $.getJSON('/refresh', function (json) {
                    if (json.refresh) {
                        $.getJSON('/addnode', function (json) {
                            localStorage['node'] = json.result;
                            $this.former('updateJSON', fin);
                        });
                    }
                    if (json.ready) {
                        $this.former('updateJSON', fin);
                    }
                });
            } else {
                $.getJSON('/addnode', function (json) {
                    localStorage['node'] = json.result;
                    $this.former('updateJSON', fin);
                });
            }
        },
        updateJSON: function (data) {
            $.post('/updatejson', {
                id: localStorage['node'],
                field: 'af_json',
                value: JSON.stringify(data)
            }, function () {
            });
        },
        submit: function (event) {
            event.preventDefault();
            var $this = $(this);
            var data = $this.serializeArray();
            var formData = {};
            var fin = [];
            for (var key in data)
            {
                var name = data[key].name.split(".");
                var val = data[key].value;
                if (formData[name[0]] === undefined) {
                    formData[name[0]] = {
                        title: $(this).former('getMessage', name[0]),
                        item: {}
                    };
                }
                formData[name[0]]['item'][name[1]] = {
                    value: val,
                    title: $(this).former('getMessage', data[key].name)
                };
                fin.push({
                    name: data[key].name,
                    value: (typeof dictonary[data[key].name] === 'object') ? dictonary[data[key].name][data[key].value] : data[key].value
                });
            }
            $.post('/updatejson', {
                id: localStorage['node'],
                field: 'af_json',
                value: JSON.stringify(fin)
            }, function (json) {
                if (json.result === true) {
                    $.ajax({
                        type: "POST",
                        url: "/sendform",
                        data: formData,
                        dataType: 'json',
                        beforeSend: function () {

                        },
                        success: function (msg) {
                            if (msg.success)
                                swal({
                                    type: 'success',
                                    text: 'Заявка отправлена'
                                });
                        },
                        error: function () {
                            swal({
                                type: 'error',
                                title: 'Техническая ошибка',
                                text: 'Попробуйте отправить сообщение позже'
                            });
                        }
                    });
                }
            }, 'json'
                    );
        },
        copyAdres: function (event) {
            event.preventDefault();
            $.each($('div[data-block="reg"]').find('input'), function (i, input) {
                var arr = input.name.split('.');
                $('input[name="post.' + arr[1] + '"]').val(input.value).trigger('change');
            });
        },
        changeBlock: function (id) {
            $('.block.is-active').removeClass('is-active').find('.box_cont').hide(0);
            $(id).nextAll('.block').find('.' + settings.changelinkClass).hide(0);
            $(id).find('.' + settings.changelinkClass).hide(0);
            $(id).addClass('is-active').find('.box_cont').show(300);
            $("html:not(:animated),body:not(:animated)").animate({
                scrollTop: settings.destination
            }, 200);
        },
        setActiveNext: function (id, next) {
            if (next === 'send') {
                $("#" + id).find('.btn_next').removeClass('blocked');
                settings.form.bind('submit', methods.submit);
            } else {
                $("#" + id).find('a.btn_next').click(function (e) {
                    if ($(this).attr('data-save') === 'Y') {
                        $(settings.form).former('update');
                    }
                    e.preventDefault();
                    $("#" + next).addClass('is-active').find('.box_cont').show(300);
                    $("#" + id).removeClass('is-active').find('.box_cont').hide(300);
                    if ($("#" + id).find("." + settings.changelinkClass).length > 0) {
                        $("#" + id).find("." + settings.changelinkClass).show(0);
                    } else {
                        var link = $('<a href="#' + id + '" class="' + settings.changelinkClass + '">' + settings.changelinkName + '</a>');
                        $("#" + id).find("h3").append(link);
                    }
                    $("html:not(:animated),body:not(:animated)").animate({
                        scrollTop: settings.destination
                    }, 200);
                }).removeClass('blocked');
            }
        },
        removeActiveNext: function (id, next) {
            if (next === 'send') {
                $("#" + id).find('.btn_next').addClass('blocked');
                settings.form.unbind('submit').submit(function (e) {
                    e.preventDefault();
                });
            } else {
                $("#" + id).find('.btn_next').unbind('click').addClass('blocked');
            }
        }
    };
    $.fn.former = function (method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error('Метод с именем ' + method + ' не существует для jQuery.tooltip');
        }
    };
})(jQuery);